

// The "Square Detector" program.
// It loads several images sequentially and tries to find squares in
// each image

#include "opencv2/core/core.hpp"
#include "opencv2/imgproc/imgproc.hpp"
#include "opencv2/highgui/highgui.hpp"

#include <cstdio>
#include <cstdlib>
#include <unistd.h>
#include <vector>
#include <limits.h>
#include <sstream>
#include <iostream>
#include <math.h>
#include <string.h>

const int DEFAULT_HOR_RES = 640;
const int DEFAULT_VER_RES = 480;

const short ESC_KEY = 27;

int thresh = 50, N = 5;

static void initialise(int argc, char* argv[], cv::VideoCapture& cap, cv::Point& center_point, bool& image_file_flag);
static double angle( cv::Point pt1, cv::Point pt2, cv::Point pt0 );
static void findSquares( const cv::Mat& image, std::vector<std::vector<cv::Point> >& squares );
static void drawSquares( cv::Mat& image, const std::vector<std::vector<cv::Point> >& squares );
static void help(std::string s);
void process_image(cv::Mat& image);


int main(int argc, char** argv)
{
    
    //cv::namedWindow( "Input", CV_WINDOW_NORMAL );

    
    cv::Point center_point;
    cv::VideoCapture cap;
    bool image_file_flag = false;
    initialise(argc, argv, cap, center_point, image_file_flag);

    // grab video input here
    
    // main loop
    while(true){
        cv::Mat input;
        if(!cap.read(input))
        {
            printf("ERROR: reading from cap failed.\n");
            return 0;
        }
        cv::Mat image(input);
        process_image(image);
        
        // handle exiting from loop with escape keys
        int WAIT_DELAY = 1;
        if(image_file_flag){
            while(true){
                short c = cv::waitKey(WAIT_DELAY); 
                if(c == ESC_KEY) break;    
            }
        }
        // change the 1 here to a different value to increase delay time
        short c = cv::waitKey(WAIT_DELAY); 
        // take a snapshot or exit capture mode
        if(  c == ' ' ){
            while(true){
                c = cv::waitKey(WAIT_DELAY);
                if(c == ' ' || c == 'q' || c == ESC_KEY) break;
            }
        }

        if ( c == 'q' || c == ESC_KEY ){
            std::cout << "Stopping capture..." << std::endl;
            break;
        }
    }
    
    return 0;
}


void process_image(cv::Mat& image)
{

    cv::Mat original_frame(image);
    std::vector<std::vector<cv::Point> > squares;
    findSquares(image, squares);
    drawSquares(original_frame, squares);

    //cv::imshow("Input", image);
    cv::imshow("output", original_frame);
    //imwrite( "out", image );
        

}


static void help(std::string s)
{
    std::cout << "Call: "<< s << " <image_file>\n";
}



// helper function:
// finds a cosine of angle between std::vectors
// from pt0->pt1 and from pt0->pt2
static double angle( cv::Point pt1, cv::Point pt2, cv::Point pt0 )
{
    double dx1 = pt1.x - pt0.x;
    double dy1 = pt1.y - pt0.y;
    double dx2 = pt2.x - pt0.x;
    double dy2 = pt2.y - pt0.y;
    return (dx1*dx2 + dy1*dy2)/sqrt((dx1*dx1 + dy1*dy1)*(dx2*dx2 + dy2*dy2) + 1e-10);
}



// returns sequence of squares detected on the image.
// the sequence is stored in the specified memory storage
static void findSquares( const cv::Mat& image, std::vector<std::vector<cv::Point> >& squares )
{

    squares.clear();

    // blur will enhance edge detection
    cv::Mat timg(image);
    
    medianBlur(image, timg, 9);
    cv::Mat gray0(timg.size(), CV_8U);
    cv::Mat gray;

    std::vector<std::vector<cv::Point> > contours;

    // find squares in every color plane of the image
    for( int c = 0; c < 3; c++ ) {

        
        // this goes through each colour channel in the source image, 
        // and completes the below process.        
        int ch[] = {c, 0};
        mixChannels(&timg, 1, &gray0, 1, ch, 1);



        // try several threshold levels
        for( int l = 0; l < N; l++ ) {

            // hack: use Canny instead of zero threshold level.
            // Canny helps to catch squares with gradient shading
            if( l == 0 ) {
                // apply Canny. Take the upper threshold from slider
                // and set the lower to 0 (which forces edges merging)
                Canny(gray0, gray, 5, thresh, 5);

                // dilate canny output to remove potential
                // holes between edge segments
                dilate(gray, gray, cv::Mat(), cv::Point(-1,-1));


            } else {
                // apply threshold if l!=0:
                //     tgray(x,y) = gray(x,y) < (l+1)*255/N ? 255 : 0
                //cv::imshow("gray_pre", gray);
                gray = gray0 >= (l+1)*255/N;
                //cv::imshow("gray_post", gray);

            }
            

            // find contours and store them all as a list
            findContours(gray, contours, cv::RETR_LIST, cv::CHAIN_APPROX_SIMPLE);

            std::vector<cv::Point> approx;

            // test each contour
            for( size_t i = 0; i < contours.size(); i++ ) {
                // approximate contour with accuracy proportional
                // to the contour perimeter
                // the arcLength param allows us to control how loosely our contour 
                // approximation of the square is allowed to be 
                approxPolyDP(cv::Mat(contours[i]), approx, 5, true);

                

                // we look for contours with more than 7 vertices
                // it is expected that a circular object will have a 
                // reasonably large number of circles 
                if( approx.size() > 7 &&
                    fabs(contourArea(cv::Mat(approx))) > 1000 &&
                    isContourConvex(cv::Mat(approx)) ) {
                    //double maxCosine = 0;

                    /*
                    for( int j = 2; j < 5; j++ ) {
                        // find the maximum cosine of the angle between joint edges
                        double cosine = fabs(angle(approx[j%4], approx[j-2], approx[j-1]));
                        maxCosine = MAX(maxCosine, cosine);
                    }
                    */

                    // if cosines of all angles are small
                    // (all angles are ~90 degree) then write quandrange
                    // vertices to resultant sequence
                    
                    //if( maxCosine < 0.3 ) {
                        squares.push_back(approx);
                    //}


                }
            }
        }
    }
}


// the function draws all the squares in the image
static void drawSquares( cv::Mat& image, const std::vector<std::vector<cv::Point> >& squares )
{
    for( size_t i = 0; i < squares.size(); i++ )
    {
        const cv::Point* p = &squares[i][0];

        int n = (int)squares[i].size();
        //dont detect the border
        if (p->x > 3 && p->y > 3)
          polylines(image, &p, &n, 1, true, cv::Scalar(0, 255, 0), 3, cv::LINE_AA);
    }
}



void initialise(int argc, char* argv[], cv::VideoCapture& cap, cv::Point& center_point, bool& image_file_flag)
{

    if(CV_MAJOR_VERSION == 2){
        std::cout << "USING OPENCV VER: 2\n";
    } else if(CV_MAJOR_VERSION == 3){
        std::cout << "USING OPENCV VER: 3\n";        
    } else {
        std::cout << "USING OPENCV VER: UNKNOWN\n";
    }

    bool video_file_flag = false;
    
    int c = 0;
    // read in cmd line args
    opterr = 0;
    std::string video_file_path, image_file_path;
    int cam_index = 0;

    while ((c = getopt (argc, argv, "b:v:c:i:")) != -1){   
        switch (c){
            
            case 'i':
                image_file_flag = true;
                image_file_path = optarg;
                printf("Using image file at: %s.\n", video_file_path.c_str());
                break;

            case 'v':
                video_file_flag = true;
                video_file_path = optarg;
                printf("Using video file at: %s.\n", video_file_path.c_str());
                break;
            
            case 'c':
                cam_index = std::stoi(optarg);
                printf("Setting camera index to: %d\n", cam_index);
                break;

            case '?':
            default:
                help(argv[0]);   
                help(argv[0]);
                exit(1);
        }
    }



    printf("Initialising capture object...\n");
    if(video_file_flag){
        printf("\tusing video file: %s\n", video_file_path.c_str());
        cap = cv::VideoCapture(video_file_path);
    } else if (image_file_flag) {
        printf("\tusing image file: %s\n", image_file_path.c_str());
        cap = cv::VideoCapture(image_file_path);
    } else {
        printf("\tusing input stream, video index %d\n", cam_index);
        cap = cv::VideoCapture(cam_index);
    }

    if(!cap.isOpened()) {
        printf("ERROR: could not open ");
        exit(1);
    } // check if we succeeded


    int input_height = DEFAULT_VER_RES, input_width = DEFAULT_HOR_RES;

    // set resolution of camera .
    if(video_file_flag){
        input_height = (int)cap.get(CV_CAP_PROP_FRAME_HEIGHT);
        input_width = (int)cap.get(CV_CAP_PROP_FRAME_WIDTH); 
        printf("\tvideo file dimensions: %d x %d\n",input_width, input_height);  
        printf("\tvideo file framerate: %lf\n", cap.get(CV_CAP_PROP_FPS));
        
    } else {
        cap.set(CV_CAP_PROP_FRAME_WIDTH, input_width);
        cap.set(CV_CAP_PROP_FRAME_HEIGHT,input_height);        
    }
 
    // determine centerpoint of image
    center_point = cv::Point(input_width/2, input_height/2);


}
